@startuml Class Diagram



package AsteroidsEngine{

    Class Engine{
        #Shader _shader
        #EntityCollection Entities
        -bool _waitRestart
        +GuiVariables Variables
        +Controller CurController
        #Engine(int xres, int yres)
        #void OnLoad()
        #void SetupResources()
        #void OnUnload()
        #void OnResize()
        #void OnRenderFrame(FrameEventArgs e)
        #void OnUpdateFrame(FrameEventArgs e)
        #void OnKeyDown(KeyboardKeyEventArgs e)
        #void OnKeyUp(KeyboardKeyEventArgs e)
        -void RestartGame()
        +void GameOver()
    }
    
     class Entity{
        -LinkedList<UpdateComponent> _updateComponents
        -ICollider _collider
        -Shader _shader
        -RenderComponent _render
        -Matrix4 _transMatrix
        -bool _dirtyTrans
        -Vector2 _position
        -float _scale
        -float _rotation
        +Vector2 Position
        +float Scale
        +float Rotation
        +Vector2 Velocity
        +bool Active
        +float Timer
        +Tags Tag
        +bool Visible
        +int ComponentsCount => _updateComponents.Count;
        +Entity(Shader shader)
        -void UpdateMatrix()
        +void Update(float delta)
        +void Render()
        +void AddComponent(UpdateComponent component)
        +void SetRender(RenderComponent component)
        +void SetCollider(ICollider collider)
        +void Collide(Entity entity2)
    }
    
    Entity o-- Shader

    Class EntityCollection{
        -List<List<Entity> > _collection
        -Dictionary<string, ICollider> _colliders
        -Dictionary<string, UpdateComponent> _components
        -List<Entity> _newCollection
        -List<RenderComponent> _renders
        -Shader _shader
        -Engine _engine
        --
        +EntityCollection(Shader shader, Engine engine)
        +void FillColliders()
        +void FillComponents()
        +void AddRender(RenderComponent renderComponent)
        -void AddComponent(string name, UpdateComponent component)
        -UpdateComponent GetComponent(string name)
        -void AddCollider(string name, ICollider collider)
        -ICollider GetCollider(string name)
        -Entity ReuseOrCreate(Tags tag, int render)
        -Entity ReuseOrCreate(Tags tag)
        +void Update(float delta)
        +void Render()
        +void Collide(Tags tag1, Tags tag2)
        +void CleanUp()
        +Entity FindByTag(Tags tag)
        +RenderComponent GetRender(int num)
        ..
        +void CreatePlayer()
        +Entity CreateAsteroid()
        +void CreateBullet(Entity origin)
        +void CreateBanner()
        +void CreateLaser(Entity origin)
        +void CreateAsteroidSpawner()
        +Entity CreateUfo()
        +void CreateLaserCounter()
        +void CreateScoreUi()
    }
    
    EntityCollection o-- Shader
    EntityCollection o-* Engine

    Class GuiVariables{
        +int Score
        +int LaserCharges
        +bool GameOver
    }
    
    class RenderComponent{
        #int QuadNum
        +RenderComponent(int num)
        +Render()
    }
    
    class Controller{
        +int Rotation
        +bool Fire1
        +bool Fire2
        +bool Thrust
    }
    
    class Shader{
        -int _handle
        -Dictionary<string, int> _uniformLocations
        --
        +Shader(string vertexPath, string fragmentPath)
        +void Use()
        +int GetAttribLocation(string name)
        +void SetMatrix4(string name, Matrix4 data)
        ..
        -bool _disposedValue
        #void Dispose(bool disposing)
        +~Shader()
        +void Dispose()
    }
    
    abstract class UpdateComponent{
        +{abstract}void Update(Entity entity, float delta)
    }
    
    class AsteroidSpawnerComponent{
        -Random _rnd
        -EntityCollection _parent
        +AsteroidSpawnerComponent(EntityCollection parent)
        +void Update(Entity entity, float delta)
    }

    AsteroidSpawnerComponent o--* EntityCollection
    
    class DecayComponent{
        +void Update(Entity entity, float delta)
    }

    DecayComponent --* EntityCollection
    
    class GameOverComponent{
        -GuiVariables _variables
        +GameOverComponent(GuiVariables variables)
        +void Update(Entity entity, float delta)
    }
    GameOverComponent o-- GuiVariables
    GameOverComponent --* EntityCollection
    
    class HyperDriveComponent{
        +void Update(Entity entity, float delta)
    }
    HyperDriveComponent --* EntityCollection
    
    class LaserChargeComponent{
        -GuiVariables _variables
        +LaserChargeComponent(GuiVariables variables)
        +void Update(Entity entity, float delta)
    }

    LaserChargeComponent o-- GuiVariables
    LaserChargeComponent --* EntityCollection
    
    class PlayerComponent{
        -GuiVariables _variables
        -Controller _controller
        -EntityCollection _parent
        -const float LaserChargeTime
        -float _bulletCd;
        -float _laserCd;
        +PlayerComponent(GuiVariables )
        +void Update(Entity entity, float delta)
    }

    PlayerComponent o-- GuiVariables
    PlayerComponent o-- Controller
    PlayerComponent o--* EntityCollection
    
    
    class ScoreDigitComponent{
        -GuiVariables _variables
        -EntityCollection _parent
        +ScoreDigitComponent(GuiVariables variables, EntityCollection parent)
        +void Update(Entity entity, float delta)
    }

    ScoreDigitComponent o-- GuiVariables
    ScoreDigitComponent o--* EntityCollection
    
    class UfoAiComponent{
        -Entity _target
        -EntityCollection _parent
        +UfoAiComponent(EntityCollection _parent)
        +void Update(Entity entity, float delta)
    }
    UfoAiComponent o--*EntityCollection
    UfoAiComponent o-- Entity

    
    UpdateComponent <|-- AsteroidSpawnerComponent
    UpdateComponent <|-- DecayComponent
    UpdateComponent <|-- GameOverComponent
    UpdateComponent <|-- HyperDriveComponent
    UpdateComponent <|-- LaserChargeComponent
    UpdateComponent <|-- PlayerComponent
    UpdateComponent <|-- ScoreDigitComponent
    UpdateComponent <|-- UfoAiComponent
    
    EntityCollection *- Entity
    EntityCollection *-- ICollider
    EntityCollection *-- RenderComponent
    EntityCollection *-- UpdateComponent
    
    Engine *-- Shader
    Engine *- Controller
    Engine *- GuiVariables
    
    Entity o-- ICollider
    Entity o- UpdateComponent
    Entity o- RenderComponent

    
    
    
    Interface ICollider{
        {abstract}+void OnCollide(Entity entity1, Entity entity2)
    }
    
    
    
    ICollider <|-- AsteroidCollider
    ICollider <|-- BulletCollider
    ICollider <|-- ShipCollider
    ICollider <|-- UfoCollider
    
    class AsteroidCollider{
        -GuiVariables _variables
        -EntityCollection _parent
        +AsteroidCollider(GuiVariables variables, EntityCollection parent)
        +void OnCollide(Entity entity1, Entity entity2)
    }
    AsteroidCollider o--* EntityCollection
    AsteroidCollider o-- GuiVariables
    
    class BulletCollider{
        +void OnCollide(Entity entity1, Entity entity2)
    }
    BulletCollider --* EntityCollection
    
    class ShipCollider{
        -Engine _engine
        +ShipCollider(Engine engine)
        +void OnCollide(Entity entity1, Entity entity2)
    }
    ShipCollider o-- Engine
    ShipCollider --* EntityCollection
    
    class UfoCollider{
        -GuiVariables _variables
        +UfoCollider(GuiVariables variables)
        +void OnCollide(Entity entity1, Entity entity2)
    }

    UfoCollider o-- GuiVariables
    UfoCollider --* EntityCollection
}

package AsteroidsApp{
    class PolyEngine{
        -Model _model
        -Texture _texture
        +bool SpriteMode
        #SetupResources()
        #void OnKeyDown(KeyboardKeyEventArgs e)
        -void SwitchMode()
        #void OnUnload(EventArgs e)       
    }
    
    class PolyRenderComponent{
        -Model _model
        -Texture _texture
        -PolyEngine _engine
        +PolyRenderComponent(int quadNum, Model model, Texture texture, PolyEngine engine)
        +void Render()
        -void RenderSprite()
        -void RenderModel()
    }
    
    class Texture{
        -int _handle
        -List<string> _names
        #string Path
        -bool _disposedValue
        #int ElementBufferObject
        #uint[] Indices
        #int VertexArrayObject
        #int VertexBufferObject
        #float[] Vertices
        #Shader _shader
        +Texture(Shader shader, string path)
        +int Length()
        +void GenIndices()
        +void InitBuffers()
        +void Use(TextureUnit unit)
        +void RenderQuad(string name)
        +void RenderQuad(int num)
        #void Dispose(bool disposing)
        +void Dispose()
        +~Texture()
    }
    
    class Model{
        +int[] _begin
        +int[] _lengths
        +Model(Shader shader, string path)
        +void GenIndices()
        +void RenderModel(int num)
    }
    
    class Program{
        -{static}void Main
    }
    
    Engine <|- PolyEngine
    RenderComponent <|-- PolyRenderComponent
    Texture <|- Model
    
    Program *- PolyEngine
    
    PolyEngine *-- Texture
    PolyEngine *- Model
    PolyEngine *-o PolyRenderComponent

    PolyRenderComponent o- Texture
    PolyRenderComponent o-- Model

    Texture o--- Shader
}
@enduml